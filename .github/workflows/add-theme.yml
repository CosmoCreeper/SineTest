name: Add Theme
on:
  issues:
    types: [opened]

jobs:
  addThemePR:
    permissions:
      contents: write
      issues: write
      pull-requests: write
    name: Add a theme
    runs-on: ubuntu-latest
    if: startsWith(github.event.issue.title, '[add-theme]:')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Parse issue
        id: issue-parser
        uses: stefanbuck/github-issue-parser@v3
        with:
          template-path: .github/ISSUE_TEMPLATE/add-theme.yml

      - name: Export parsed payload into variables
        id: export
        run: |
          echo "THEME_HOMEPAGE=${{ fromJson(steps.issue-parser.outputs.jsonString)['homepage'] }}" >> $GITHUB_ENV
          echo "THEME_AUTHOR=${{ github.event.issue.user.login }}" >> $GITHUB_ENV
          echo "THEME_NAME=$(echo '${{ github.event.issue.title }}' | sed 's/^\[add-theme\]://' | xargs)" >> $GITHUB_ENV

      - name: Create ownership check script
        run: |
          cat << 'EOF' > check_ownership.py
          import re
          import sys

          def check_ownership(homepage, issue_creator):
              pattern = r'github\.com/([^/]+)/([^/]+)'
              match = re.search(pattern, homepage)
              if not match:
                  print("Invalid GitHub repository URL")
                  sys.exit(1)
              owner, _ = match.groups()
              
              if owner.lower() != issue_creator.lower():
                  print(
                      f"You must be the owner of the repository ({owner}) to add a theme."
                  )
                  sys.exit(2)

          if __name__ == "__main__":
              check_ownership("${{ env.THEME_HOMEPAGE }}", "${{ env.THEME_AUTHOR }}")
          EOF

      - name: Run ownership check
        id: ownership-check
        run: python check_ownership.py > ownership_output.txt 2>&1 || echo "OWNERSHIP_FAILED=true" >> $GITHUB_ENV

      - name: Capture ownership output
        if: env.OWNERSHIP_FAILED == 'true'
        run: |
          echo "OWNERSHIP_MESSAGE=$(cat ownership_output.txt)" >> $GITHUB_ENV

      - name: Close issue for ownership failure
        if: env.OWNERSHIP_FAILED == 'true'
        uses: peter-evans/close-issue@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          comment: |
            # Theme submission not authorized

            ${{ env.OWNERSHIP_MESSAGE }}

            *If you believe you have authorization, please create an issue about it here and the moderators will take care of it soon.*

      - name: Create duplicate check script
        if: env.OWNERSHIP_FAILED != 'true'
        run: |
          cat << 'EOF' > check_duplicate.py
          import json
          import re
          import urllib.request
          import os

          def get_theme_id(homepage):
              pattern = r'github\.com/([^/]+)/([^/]+)'
              match = re.search(pattern, homepage)
              if not match:
                  raise ValueError("Invalid GitHub repository URL")
              owner, repo = match.groups()
              
              theme_json_url = f"https://raw.githubusercontent.com/{owner}/{repo}/main/theme.json"
              try:
                  with urllib.request.urlopen(theme_json_url) as response:
                      theme_data = json.loads(response.read().decode())
              except Exception as e:
                  raise ValueError(f"Failed to fetch theme.json: {str(e)}")
              
              theme_id = theme_data.get("id")
              if not theme_id:
                  raise ValueError("theme.json must contain 'id' property")
              return theme_id

          def check_duplicate_prs(theme_id):
              repo = "${{ github.repository }}"
              api_url = f"https://api.github.com/repos/{repo}/pulls?state=open"
              headers = {
                  "Authorization": f"Bearer {os.getenv('GITHUB_TOKEN')}",
                  "Accept": "application/vnd.github.v3+json"
              }
              
              try:
                  req = urllib.request.Request(api_url, headers=headers)
                  with urllib.request.urlopen(req) as response:
                      prs = json.loads(response.read().decode())
              except Exception as e:
                  raise ValueError(f"Failed to fetch PRs: {str(e)}")
              
              print(f"DEBUG: Found {len(prs)} open PRs")
              for pr in prs:
                  pr_number = pr["number"]
                  diff_url = pr["diff_url"]
                  try:
                      with urllib.request.urlopen(diff_url) as response:
                          diff = response.read().decode()
                  except Exception as e:
                      print(f"DEBUG: Failed to fetch diff for PR #{pr_number}: {str(e)}")
                      continue
                  
                  print(f"DEBUG: Checking diff for PR #{pr_number}")
                  pattern = rf'"\s*{re.escape(theme_id)}\s*"\s*:\s*"[^"]+"'
                  if "latest.json" in diff and re.search(pattern, diff):
                      return pr_number, pr["html_url"]
              return None, None

          if __name__ == "__main__":
              try:
                  theme_id = get_theme_id("${{ env.THEME_HOMEPAGE }}")
                  pr_number, pr_url = check_duplicate_prs(theme_id)
                  if pr_number:
                      print(f"DUPLICATE_FOUND=Theme already submitted in PR #{pr_number}: {pr_url}")
                  else:
                      print("No duplicates found")
              except Exception as e:
                  print(f"Error: {str(e)}")
                  exit(1)
          EOF

      - name: Run duplicate check
        if: env.OWNERSHIP_FAILED != 'true'
        run: python check_duplicate.py > duplicate_output.txt 2>&1

      - name: Capture duplicate output
        if: env.OWNERSHIP_FAILED != 'true'
        run: |
          DUPLICATE_MESSAGE=$(cat duplicate_output.txt)
          if grep -q "DUPLICATE_FOUND=" duplicate_output.txt; then
            echo "DUPLICATE_FOUND=true" >> $GITHUB_ENV
            echo "DUPLICATE_MESSAGE=$DUPLICATE_MESSAGE" >> $GITHUB_ENV
          fi

      - name: Close issue for duplicate submission
        if: env.DUPLICATE_FOUND == 'true'
        uses: peter-evans/close-issue@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          comment: |
            # Duplicate theme submission

            Sorry, a pull request for this theme already exists:

            > ${{ env.DUPLICATE_MESSAGE }}

            Please check the existing pull request or contact the maintainers if you believe this is an error.

      - name: Create existing theme check script
        if: env.OWNERSHIP_FAILED != 'true' && env.DUPLICATE_FOUND != 'true'
        run: |
          cat << 'EOF' > check_existing.py
          import json
          import re
          import urllib.request

          def get_theme_id(homepage):
              pattern = r'github\.com/([^/]+)/([^/]+)'
              match = re.search(pattern, homepage)
              if not match:
                  raise ValueError("Invalid GitHub repository URL")
              owner, repo = match.groups()
              
              theme_json_url = f"https://raw.githubusercontent.com/{owner}/{repo}/main/theme.json"
              try:
                  with urllib.request.urlopen(theme_json_url) as response:
                      theme_data = json.loads(response.read().decode())
              except Exception as e:
                  raise ValueError(f"Failed to fetch theme.json: {str(e)}")
              
              theme_id = theme_data.get("id")
              if not theme_id:
                  raise ValueError("theme.json must contain 'id' property")
              return theme_id

          def check_existing_theme(theme_id):
              try:
                  with open("latest.json", "r") as f:
                      data = json.load(f)
              except Exception as e:
                  raise ValueError(f"Failed to read latest.json: {str(e)}")
              
              if "marketplace" in data and theme_id in data["marketplace"]:
                  return f"Theme with ID '{theme_id}' is already included in the marketplace"
              return None

          if __name__ == "__main__":
              try:
                  theme_id = get_theme_id("${{ env.THEME_HOMEPAGE }}")
                  existing_message = check_existing_theme(theme_id)
                  if existing_message:
                      print(f"EXISTING_FOUND={existing_message}")
                  else:
                      print("No existing theme found")
              except Exception as e:
                  print(f"Error: {str(e)}")
                  exit(1)
          EOF

      - name: Run existing theme check
        if: env.OWNERSHIP_FAILED != 'true' && env.DUPLICATE_FOUND != 'true'
        run: python check_existing.py > existing_output.txt 2>&1

      - name: Capture existing theme output
        if: env.OWNERSHIP_FAILED != 'true' && env.DUPLICATE_FOUND != 'true'
        run: |
          EXISTING_MESSAGE=$(cat existing_output.txt)
          if grep -q "EXISTING_FOUND=" existing_output.txt; then
            echo "EXISTING_FOUND=true" >> $GITHUB_ENV
            echo "EXISTING_MESSAGE=$EXISTING_MESSAGE" >> $GITHUB_ENV
          fi

      - name: Close issue for existing theme
        if: env.EXISTING_FOUND == 'true'
        uses: peter-evans/close-issue@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          comment: |
            # Theme already exists

            Sorry, this theme cannot be added because it is already included in the marketplace:

            > ${{ env.EXISTING_MESSAGE }}

            Please check the marketplace or contact the maintainers if you believe this is an error.

      - name: Create update script
        if: env.OWNERSHIP_FAILED != 'true' && env.DUPLICATE_FOUND != 'true' && env.EXISTING_FOUND != 'true'
        run: |
          cat << 'EOF' > update_marketplace.py
          import json
          import re
          import urllib.request

          def get_repo_info(homepage):
              pattern = r'github\.com/([^/]+)/([^/]+)'
              match = re.search(pattern, homepage)
              if not match:
                  raise ValueError("Invalid GitHub repository URL")
              owner, repo = match.groups()
,
              theme_json_url = f"https://raw.githubusercontent.com/{owner}/{repo}/main/theme.json"
              try:
                  with urllib.request.urlopen(theme_json_url) as response:
                      theme_data = json.loads(response.read().decode())
              except Exception as e:
                  theme_id = theme_data.get("id")
              if not theme_id:
                  raise ValueError("theme.json must contain 'id' property")
              
              return theme_id, f"{owner}/{repo}"

          def update_marketplace():
              with open("latest.json", "r") as f:
                  data = json.load(f)
              
              homepage = "${{ env.THEME_HOMEPAGE }}"
              theme_id, user_repo = get_repo_info(homepage)
              
              if "marketplace" not in data:
                  data["marketplace"] = {}
              data["marketplace"][theme_id] = user_repo
              
              with open("latest.json", "w") as f:
                  json.dump(data, f, indent=2)

          if __name__ == "__main__":
              try:
                  update_marketplace()
              except Exception as e:
                  print(f"Error: {str(e)}")
                  exit(1)
          EOF

      - name: Run update script
        if: env.OWNERSHIP_FAILED != 'true' && env.DUPLICATE_FOUND != 'true' && env.EXISTING_FOUND != 'true'
        run: python update_marketplace.py 2> error.log

      - name: Export error output
        if: failure() && env.OWNERSHIP_FAILED != 'true' && env.DUPLICATE_FOUND != 'true' && env.EXISTING_FOUND != 'true'
        run: |
          cat error.log
          echo "ERROR_OUTPUT=$(cat error.log)" >> $GITHUB_ENV

      - name: Show error message
        if: failure() && env.OWNERSHIP_FAILED != 'true' && env.DUPLICATE_FOUND != 'true' && env.EXISTING_FOUND != 'true'
        uses: peter-evans/close-issue@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          comment: |
            # Error adding theme

            Sorry, there was an error processing your theme submission:

            > ${{ env.ERROR_OUTPUT }}

            Please check your homepage URL and ensure the repository contains a valid theme.json file with an 'id' property. If you believe this is an error, contact the maintainers.

      - name: Setup Git
        if: success() && env.OWNERSHIP_FAILED != 'true' && env.DUPLICATE_FOUND != 'true' && env.EXISTING_FOUND != 'true'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create Pull Request
        if: success() && env.OWNERSHIP_FAILED != 'true' && env.DUPLICATE_FOUND != 'true' && env.EXISTING_FOUND != 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          add-paths: latest.json
          labels: staged
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "Add theme: ${{ env.THEME_NAME }}"
          delete-branch: true
          title: "Add theme: ${{ env.THEME_NAME }}"
          body: |
            # Add theme: ${{ env.THEME_NAME }}

            This PR adds a new theme to the marketplace.

            ## Theme Details
            * **Name**: ${{ env.THEME_NAME }}
            * **Homepage**: ${{ env.THEME_HOMEPAGE }}
            * **Author**: @${{ env.THEME_AUTHOR }}
          branch: add-theme-${{ github.event.issue.number }}
          base: main

      - name: Close Issue
        if: success() && env.OWNERSHIP_FAILED != 'true' && env.DUPLICATE_FOUND != 'true' && env.EXISTING_FOUND != 'true'
        uses: peter-evans/close-issue@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          comment: |
            # Thank you for your contribution! :tada:

            Your theme has been successfully submitted. The maintainers will review it and get back to you soon.

            Here are some details about your submission:
            * Your theme has been requested into [this PR](https://github.com/${{ github.repository }}/pull/${{ env.PULL_REQUEST_NUMBER }}).
            * It has been created into the [add-theme-${{ github.event.issue.number }} branch](https://github.com/${{ github.repository }}/tree/add-theme-${{ github.event.issue.number }}).
